# 🔥 Real-Time Chat & Push Notification Integration Expert Prompt

## Objective
Integrate **Pusher Chat** and **OneSignal Push Notifications** into the unified UI/UX of this app, so all chat and notifications **feel native**, with persistent storage using Supabase.

---

## 1. **Core Requirements**
- 📮 **Chat:** Real-time, bidirectional (Player ↔ GRE/Staff) chat using [Pusher](https://pusher.com/).
- 🛎️ **Push Notifications:** Browser & in-app, using [OneSignal](https://onesignal.com/).
- 🗃️ **Supabase:** All messages and session history persist in Supabase tables.

---

## 2. **What to Add — Step-by-Step**

### a) **Frontend Integration (React)**

#### **Pusher (Real-Time Chat)**
At the top of your main chat component:
import Pusher from 'pusher-js';
import { useEffect } from 'react';

// At component level:
useEffect(() => {
const pusher = new Pusher('<PUSHER_PUBLIC_KEY>', {
cluster: '<PUSHER_CLUSTER>'
});

const channel = pusher.subscribe('chat');
channel.bind('new-message', data => {
// TODO: Dispatch message to chat state/store/UI
});

return () => {
pusher.unsubscribe('chat');
pusher.disconnect();
};
}, []);

text

#### **OneSignal (Push Notifications)**
In your top-level component (`App.tsx` or similar):
import OneSignal from 'react-onesignal';
import { useEffect } from 'react';

useEffect(() => {
OneSignal.init({ appId: '<ONESIGNAL_APP_ID>' });
}, []);

text

#### **Unified UI/UX Requirement**
- Integrate chat window and notification dialogs directly into your app’s native design system (not in popups or overlays that look external).
- **Display notification badges**, toast popups, and chat indicators as part of your React UI/UX.

---

### b) **Backend Integration (Node/Express)**

#### **Pusher Trigger on Message Sent:**
const Pusher = require('pusher');
const pusher = new Pusher({
appId: '<PUSHER_APP_ID>',
key: '<PUSHER_PUBLIC_KEY>',
secret: '<PUSHER_SECRET>',
cluster: '<PUSHER_CLUSTER>',
useTLS: true
});

router.post('/api/chat/send', async (req, res) => {
// TODO: Save message to Supabase first
// ...

// After DB save success:
pusher.trigger('chat', 'new-message', {
// TODO: fill with message data object
});
res.status(200).send({ success: true });
});

text

#### **OneSignal Trigger (Optional, for special events):**
const sendOneSignal = async (msg, userIds = []) => {
// See https://documentation.onesignal.com/reference/create-notification
const body = {
app_id: '<ONESIGNAL_APP_ID>',
contents: { en: msg },
include_external_user_ids: userIds, // Optional targeting
};
await fetch('https://onesignal.com/api/v1/notifications', {
method: 'POST',
headers: {
Authorization: 'Basic <ONESIGNAL_REST_API_KEY>',
'Content-Type': 'application/json'
},
body: JSON.stringify(body)
});
};

text

---

### c) **Supabase Integration**

- **On chat send**: Always persist every message/session in Supabase.
- **On chat load**: Fetch message history from Supabase for this session.
- Keep the **real-time user state** (online, typing, last active) in UI-only or push to Supabase if you want cross-device presence.

---

### d) **Fill These Placeholders for Each App**
- `<PUSHER_PUBLIC_KEY>`: Your Pusher app key
- `<PUSHER_CLUSTER>`: Your Pusher cluster name (e.g., "ap2", "us2" etc.)
- `<PUSHER_APP_ID>` & `<PUSHER_SECRET>`: Securely use these on backend only
- `<ONESIGNAL_APP_ID>`: OneSignal App ID for this portal
- `<ONESIGNAL_REST_API_KEY>`: OneSignal REST API key

---

## 3. **Expert UI/UX Guidelines**
- All chat messages, notification alerts, and user presence must look and behave like **native components** (consistent with app theme, not external widgets).
- Use **Redux, Context, or State Management** as appropriate for global chat/notification state.
- **For guest/unregistered users**, start chat as anonymous or prompt for minimal info, and store as such in Supabase.
- GRE/Staff should see a clear distinction between registered user chats and guest chats in their dashboard.

---

## 4. **Testing**
- Test chat from Player Portal ↔ Staff Portal. Confirm messages show instantly both ways and persist on reload.
- Send an in-app push notification. Confirm visible in browser and/or mobile web.
- Chat as guest. Confirm GRE sees as guest/unknown and messages are received with distinction.
- Validate UI adapts responsively on mobile/desktop.

---

## 5. **Do All This on Both Apps**
- Repeat the necessary setup in **both Player and Staff Portal** projects.
- Use different OneSignal App IDs if wanting to segment notification targeting by portal, or the same for unified targeting.

---

## 6. **Final Step**
- Remove all legacy websocket and notification integrations.
- Document in README the full chat/notification experience for reviewers.

---

**[Replace all fill-in-the-blanks above with your actual keys, app IDs, and logic as per your deployment.]**
