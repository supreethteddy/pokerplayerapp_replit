Short answer: your app/agent likely queried a different DB/connection or schema (or bypassed RLS) than the Supabase table view you’re looking at. Deleting rows “without cascade” wouldn’t make 78 rows appear—it’s unrelated.

What’s probably happening (ranked)

ENV mismatch (dev vs prod): your server/agent is writing to a local Postgres or another Supabase project (different SUPABASE_URL/SUPABASE_SERVICE_ROLE_KEY).

Wrong schema/table: code inserts into players in a non-public schema, but you’re viewing public.players.

RLS visibility differences: the count was taken with a privileged/service connection (sees all rows) while your dashboard/table view (or your SQL editor session role) is restricted by RLS and only shows 3.

Materialized view or alias confusion: code writing to a table name that’s a view in one place and a real table in another.

Quick checks (run exactly these in the Supabase SQL editor)
-- 0) Sanity: which DB/host am I hitting?
select current_database() as db, current_user as usr, inet_server_addr() as host;

-- 1) Make sure the table you’re viewing is the same one being written
select table_schema, table_name
from information_schema.tables
where table_name ilike 'players';

-- 2) Count by schema (catches duplicates)
select table_schema, count(*) 
from information_schema.columns 
where table_name = 'players'
group by 1;

-- 3) Count only the canonical table you expect
select count(*) from public.players;

-- 4) Sample the last 10 rows to verify reality
select id, email, created_at from public.players order by created_at desc limit 10;

-- 5) Is RLS on for this table?
select c.relname as table, c.relrowsecurity as rls_enabled
from pg_class c join pg_namespace n on n.oid = c.relnamespace
where n.nspname='public' and c.relname='players';

-- 6) Show policies (if any) that may hide rows
select * from pg_policies where schemaname='public' and tablename='players';

If #0 / #1 look off

Your app is pointed to the wrong DB. Compare your server’s .env with Supabase project settings. The only correct pair is Project → Settings → API: SUPABASE_URL and service_role key.

If #3 shows 3 but your agent saw 78

The agent ran against a different DB (local or another project). Fix ENV on the agent/backend.

If #3 shows 78 but your table view shows 3

RLS is hiding rows in the UI session. Either:

Temporarily disable RLS to confirm:

alter table public.players disable row level security;


Or add a broad read policy for your admin role:

create policy "admin read players"
on public.players
for select
to authenticated
using (true);


(Re-enable/adjust as needed afterward.)

If schema mismatch

Ensure all code writes to public.players (or consistently use your chosen schema) and your dashboard is viewing the same.

About “deleted without cascade”

No, that by itself won’t cause a higher count elsewhere. Lack of ON DELETE CASCADE only leaves orphaned child rows if you delete parents—it doesn’t make rows invisible in the table editor. If you implemented soft deletes (a deleted_at column) and your UI filters them out, that could explain differences—check with:

select count(*) total, 
       count(*) filter (where deleted_at is not null) soft_deleted
from public.players;

Ensure players are created on signup (Supabase Auth → players)

If you intend automatic row creation when a user registers, add a trigger:

create or replace function public.handle_new_user()
returns trigger language plpgsql as $$
begin
  insert into public.players (email, first_name, last_name, created_at)
  values (new.email, coalesce(new.raw_user_meta_data->>'firstName',''),
                 coalesce(new.raw_user_meta_data->>'lastName',''),
                 now());
  return new;
end;
$$;

drop trigger if exists on_auth_user_created on auth.users;

create trigger on_auth_user_created
after insert on auth.users
for each row execute function public.handle_new_user();


Then verify:

insert into auth.users (id, email) values (gen_random_uuid(), 'trigger-test@example.com'); -- (Use SQL only on a test project!)
select * from public.players order by created_at desc limit 1;

Clerk note

If you’re using Clerk for auth, Supabase won’t auto-create rows unless your backend does it (or you map Clerk webhooks → DB). Decide on one source of truth and wire the signup event to insert into public.players.

Bottom line: the “78 vs 3” is almost certainly an environment/schema/RLS mismatch. Run the queries above; you’ll know exactly where the discrepancy originates in minutes.

Confidence: High for diagnostics and likely causes; exact culprit depends on your project’s env/policies.
References: Supabase RLS & policies (docs): https://supabase.com/docs/guides/auth/row-level-security
 | Supabase service keys & env: https://supabase.com/docs/guides/api#api-keys
 | Clerk webhooks & user management: https://clerk.com/docs/users/overview