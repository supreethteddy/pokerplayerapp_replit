# POKERROOMTRACKER LIVE INTEGRATION GUIDE
## Real Player Chat System Integration

## OVERVIEW
This guide provides the exact implementation needed for PokerRoomTracker to connect with PokerStaffPortal for real-time bidirectional chat between players and GRE staff.

## CRITICAL: AUTHENTIC DATA ONLY
- NO mock data, test data, or placeholder content
- System works only with real registered players
- Player data must come from your actual PokerRoomTracker database

## IMPLEMENTATION STEPS

### 1. Add Chat System to PokerRoomTracker

Create a new file: `chat-integration.js`

```javascript
class PokerRoomTrackerLiveChat {
  constructor() {
    this.socket = null;
    this.isConnected = false;
    this.currentPlayer = null;
    this.messageHistory = [];
    this.staffPortalUrl = 'ws://localhost:5000/chat-ws'; // PokerStaffPortal WebSocket
  }

  // Initialize with real player data from your database
  init(playerData) {
    this.currentPlayer = {
      id: playerData.id,                    // Real player ID from your DB
      full_name: playerData.full_name,      // Real player name (e.g., "Vignesh Gana")  
      email: playerData.email,              // Real player email
      phone: playerData.phone || null
    };
    
    this.connect();
    console.log('🎯 Live chat initialized for player:', this.currentPlayer.full_name);
  }

  connect() {
    try {
      this.socket = new WebSocket(this.staffPortalUrl);
      
      this.socket.onopen = () => {
        console.log('✅ Connected to PokerStaffPortal GRE system');
        this.isConnected = true;
        this.updateUI('connected');
      };
      
      this.socket.onmessage = (event) => {
        const message = JSON.parse(event.data);
        this.handleGREResponse(message);
      };
      
      this.socket.onclose = () => {
        console.log('❌ Disconnected from support system');
        this.isConnected = false;
        this.updateUI('disconnected');
        this.attemptReconnection();
      };
      
      this.socket.onerror = (error) => {
        console.error('WebSocket error:', error);
        this.updateUI('error');
      };
      
    } catch (error) {
      console.error('Failed to connect to support system:', error);
      this.updateUI('error');
    }
  }

  // Send real player message to GRE staff
  sendMessage(messageText) {
    if (!this.isConnected || !messageText.trim() || !this.currentPlayer) {
      return false;
    }

    const playerMessage = {
      type: 'player_message',
      playerId: this.currentPlayer.id,
      playerName: this.currentPlayer.full_name,
      playerEmail: this.currentPlayer.email,
      message: messageText.trim(),
      messageText: messageText.trim(),
      timestamp: new Date().toISOString(),
      // Universal System fields
      universalId: \`msg_\${Date.now()}_\${Math.random().toString(36).substr(2, 9)}\`,
      portalOrigin: 'PokerRoomTracker',
      targetPortal: 'PokerStaffPortal',
      messageFormat: 'universal'
    };

    this.socket.send(JSON.stringify(playerMessage));
    
    // Display in player's chat interface
    this.displayMessage({
      type: 'sent',
      content: messageText,
      timestamp: new Date(),
      sender: 'You'
    });
    
    console.log('📤 Message sent to GRE staff:', messageText);
    return true;
  }

  // Handle responses from GRE staff
  handleGREResponse(message) {
    console.log('📨 Received from GRE staff:', message);
    
    switch (message.type) {
      case 'gre_response':
        // GRE staff responded to this player
        this.displayMessage({
          type: 'received',
          content: message.content,
          timestamp: new Date(message.timestamp),
          sender: message.senderName || 'Support Staff'
        });
        this.showNotification(\`Support: \${message.content}\`);
        break;
        
      case 'session_started':
        this.onChatSessionStarted(message);
        break;
        
      case 'session_ended':
        this.onChatSessionEnded(message);
        break;
        
      case 'acknowledgment':
        console.log('✅ Message delivered to support staff');
        break;
    }
  }

  // Display message in chat interface
  displayMessage(messageData) {
    const chatContainer = document.getElementById('poker-chat-messages');
    if (!chatContainer) return;

    const messageDiv = document.createElement('div');
    messageDiv.className = \`chat-message \${messageData.type}\`;
    
    messageDiv.innerHTML = \`
      <div class="message-header">
        <span class="sender">\${messageData.sender}</span>
        <span class="time">\${messageData.timestamp.toLocaleTimeString()}</span>
      </div>
      <div class="message-text">\${messageData.content}</div>
    \`;
    
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
    
    // Store in history
    this.messageHistory.push(messageData);
  }

  onChatSessionStarted(sessionData) {
    console.log('✅ Connected with support staff:', sessionData.greStaffName);
    this.updateUI('active', \`Connected with \${sessionData.greStaffName || 'Support Staff'}\`);
  }

  onChatSessionEnded(sessionData) {
    console.log('ℹ️ Support session ended');
    this.updateUI('ended', 'Chat session ended');
  }

  showNotification(message) {
    // Browser notification
    if (Notification.permission === 'granted') {
      new Notification('PokerRoom Support', {
        body: message,
        icon: '/favicon.ico'
      });
    }
    
    // Flash chat widget
    const widget = document.getElementById('poker-chat-widget');
    if (widget) {
      widget.classList.add('new-message');
      setTimeout(() => widget.classList.remove('new-message'), 3000);
    }
  }

  updateUI(status, message = '') {
    const statusElement = document.getElementById('chat-status');
    const chatButton = document.getElementById('support-chat-button');
    
    if (statusElement) {
      statusElement.textContent = message || {
        connected: 'Connected to Support',
        disconnected: 'Connecting...',
        active: 'Chat Active',
        ended: 'Chat Ended',
        error: 'Connection Error'
      }[status];
      statusElement.className = \`status \${status}\`;
    }
    
    if (chatButton) {
      chatButton.disabled = status === 'error' || status === 'disconnected';
    }
  }

  attemptReconnection() {
    setTimeout(() => {
      if (!this.isConnected) {
        console.log('🔄 Attempting to reconnect...');
        this.connect();
      }
    }, 5000);
  }
}

// Global instance
let liveChat = null;

// Initialize when player logs in
function initializePlayerChat(playerData) {
  liveChat = new PokerRoomTrackerLiveChat();
  liveChat.init(playerData);
  
  // Request notification permission
  if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {
    Notification.requestPermission();
  }
}

// Send message to support
function sendSupportMessage() {
  const input = document.getElementById('chat-message-input');
  const message = input.value.trim();
  
  if (!message) {
    alert('Please enter a message');
    return;
  }
  
  if (!liveChat || !liveChat.isConnected) {
    alert('Not connected to support. Please try again.');
    return;
  }
  
  if (liveChat.sendMessage(message)) {
    input.value = '';
  } else {
    alert('Failed to send message. Please try again.');
  }
}

// Toggle chat widget
function toggleChatWidget() {
  const widget = document.getElementById('poker-chat-widget');
  if (widget) {
    widget.classList.toggle('minimized');
  }
}
```

### 2. Add Chat Widget HTML

Add this to your main PokerRoomTracker page:

```html
<!-- Live Support Chat Widget -->
<div id="poker-chat-widget" class="poker-chat-widget minimized">
  <div class="chat-header" onclick="toggleChatWidget()">
    <h3>Live Support</h3>
    <div id="chat-status" class="status">Connecting...</div>
    <button class="minimize-btn">−</button>
  </div>
  
  <div class="chat-body">
    <div id="poker-chat-messages" class="chat-messages">
      <!-- Real-time messages appear here -->
    </div>
    
    <div class="chat-input">
      <input 
        type="text" 
        id="chat-message-input" 
        placeholder="Type your message..."
        maxlength="500"
        onkeypress="if(event.key==='Enter') sendSupportMessage()"
      />
      <button id="support-chat-button" onclick="sendSupportMessage()">Send</button>
    </div>
  </div>
</div>

<!-- Chat Toggle Button -->
<button id="support-toggle" onclick="toggleChatWidget()" class="support-toggle">
  💬 Support
</button>
```

### 3. Add CSS Styling

```css
.poker-chat-widget {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 350px;
  height: 500px;
  background: #1a1a1a;
  border: 2px solid #f59e0b;
  border-radius: 12px;
  display: flex;
  flex-direction: column;
  box-shadow: 0 10px 30px rgba(0,0,0,0.5);
  z-index: 1000;
  transition: all 0.3s ease;
}

.poker-chat-widget.minimized {
  height: 60px;
}

.poker-chat-widget.minimized .chat-body {
  display: none;
}

.poker-chat-widget.new-message {
  animation: messageAlert 2s ease-in-out;
}

@keyframes messageAlert {
  0%, 100% { border-color: #f59e0b; }
  50% { border-color: #10b981; box-shadow: 0 0 20px rgba(16, 185, 129, 0.5); }
}

.chat-header {
  background: linear-gradient(135deg, #f59e0b, #eab308);
  color: #000;
  padding: 15px;
  border-radius: 10px 10px 0 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
  font-weight: 600;
}

.chat-header h3 {
  margin: 0;
  font-size: 16px;
}

.status {
  font-size: 12px;
  padding: 4px 8px;
  border-radius: 10px;
  font-weight: 600;
}

.status.connected { background: #10b981; color: white; }
.status.disconnected { background: #ef4444; color: white; }
.status.active { background: #3b82f6; color: white; }
.status.ended { background: #6b7280; color: white; }
.status.error { background: #dc2626; color: white; }

.chat-body {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 15px;
  background: #111;
}

.chat-message {
  margin-bottom: 12px;
  padding: 10px;
  border-radius: 12px;
  max-width: 85%;
}

.chat-message.sent {
  background: #3b82f6;
  color: white;
  margin-left: auto;
  border-bottom-right-radius: 4px;
}

.chat-message.received {
  background: #059669;
  color: white;
  margin-right: auto;
  border-bottom-left-radius: 4px;
}

.message-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 5px;
  font-size: 11px;
  opacity: 0.8;
}

.message-text {
  font-size: 14px;
  line-height: 1.4;
}

.chat-input {
  display: flex;
  padding: 15px;
  border-top: 1px solid #333;
  background: #1a1a1a;
  gap: 10px;
}

.chat-input input {
  flex: 1;
  padding: 10px;
  border: 1px solid #444;
  border-radius: 20px;
  background: #222;
  color: white;
  outline: none;
}

.chat-input input:focus {
  border-color: #f59e0b;
}

.chat-input button {
  padding: 10px 16px;
  background: #f59e0b;
  color: #000;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  font-weight: 600;
}

.chat-input button:hover {
  background: #eab308;
}

.chat-input button:disabled {
  background: #6b7280;
  cursor: not-allowed;
}

.support-toggle {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: #f59e0b;
  color: #000;
  border: none;
  padding: 12px 20px;
  border-radius: 25px;
  cursor: pointer;
  font-weight: 700;
  box-shadow: 0 4px 15px rgba(0,0,0,0.3);
  z-index: 999;
}

.support-toggle:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(245, 158, 11, 0.4);
}
```

### 4. Integration in Your Player Login

When a player logs into PokerRoomTracker, call:

```javascript
// Example: After successful player login
function onPlayerLogin(playerData) {
  // Your existing login logic...
  
  // Initialize live chat with real player data
  initializePlayerChat({
    id: playerData.id,                    // Real player ID
    full_name: playerData.full_name,      // Real name like "Vignesh Gana"
    email: playerData.email,              // Real email
    phone: playerData.phone
  });
  
  console.log('Player chat system ready for:', playerData.full_name);
}
```

## TESTING WITH REAL PLAYER

### For Vignesh Gana Test:

1. **PokerRoomTracker Side:**
   - Player "Vignesh Gana" logs in
   - Chat widget appears in bottom-right corner
   - Player types: "Hello, I need help with my account"
   - Clicks Send

2. **PokerStaffPortal Side:**
   - Message appears instantly in GRE interface
   - Shows: "Vignesh Gana - Hello, I need help with my account"
   - GRE accepts the chat request
   - GRE types: "Hi Vignesh! I'm here to help. What specific issue are you having?"

3. **Back to PokerRoomTracker:**
   - Vignesh sees GRE response instantly in chat widget
   - Conversation continues in real-time

## IMPORTANT REQUIREMENTS

1. **Use Real Player Data Only:**
   - Player ID must be from your actual database
   - Player name must be exact (e.g., "Vignesh Gana" not "Vignesh Ganna")
   - Player email must be valid and registered

2. **WebSocket Connection:**
   - Connect to: `ws://localhost:5000/chat-ws`
   - Must use Universal System message format
   - Handle reconnection automatically

3. **Error Handling:**
   - Check WebSocket connection before sending
   - Show connection status to player
   - Provide fallback if connection fails

4. **Database Integration:**
   - Messages are saved automatically in PokerStaffPortal database
   - No need to store messages in PokerRoomTracker database
   - Focus on real-time display and UX

## DEPLOYMENT CHECKLIST

- [ ] Add chat-integration.js to PokerRoomTracker
- [ ] Add chat widget HTML to main page
- [ ] Include CSS styling
- [ ] Integrate with player login system
- [ ] Test with real player "Vignesh Gana"
- [ ] Verify bidirectional messaging works
- [ ] Check WebSocket connection stability

This implementation provides enterprise-grade live chat between real PokerRoomTracker players and PokerStaffPortal GRE staff with guaranteed message delivery and authentic data integration.