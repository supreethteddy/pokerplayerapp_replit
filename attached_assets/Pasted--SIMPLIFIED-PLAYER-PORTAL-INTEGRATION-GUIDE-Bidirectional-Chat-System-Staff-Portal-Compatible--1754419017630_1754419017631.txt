# SIMPLIFIED PLAYER PORTAL INTEGRATION GUIDE
## Bidirectional Chat System - Staff Portal Compatible

### CRITICAL STATUS
‚úÖ **Staff Portal**: Receiving player messages via Pusher
‚úÖ **Staff Portal**: Can send messages (Pusher delivery working)
‚ö†Ô∏è **Database**: Schema mismatches - using Pusher-only mode
üéØ **Player Portal**: Needs this integration guide for bidirectional chat

---

## WORKING PUSHER CHANNELS

### Channel Configuration (TESTED & WORKING)
- **Staff Portal Receives**: `staff-portal` channel, event `new-player-message`
- **Player Portal Receives**: `player-{playerId}` channel, event `new-staff-message`

### Environment Variables Required
```env
VITE_PUSHER_KEY=your_pusher_key
VITE_PUSHER_CLUSTER=your_pusher_cluster
```

---

## PLAYER PORTAL IMPLEMENTATION

### 1. Basic Pusher Setup
```javascript
// Initialize Pusher in Player Portal
const pusher = new Pusher(process.env.VITE_PUSHER_KEY, {
  cluster: process.env.VITE_PUSHER_CLUSTER,
  encrypted: true
});

// Subscribe to player-specific channel
const playerId = 29; // Your player ID
const playerChannel = pusher.subscribe(`player-${playerId}`);

// Listen for staff messages
playerChannel.bind('new-staff-message', (data) => {
  console.log('üì® Player Portal: Received staff message:', data);
  displayStaffMessage(data);
});
```

### 2. Send Message to Staff Portal
```javascript
// Send player message to Staff Portal
async function sendMessageToStaff(message) {
  try {
    const response = await fetch('/api/player-chat-integration/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        sessionId: `session-${playerId}`,
        playerId: playerId,
        playerName: 'Player Name',
        message: message,
        messageType: 'text'
      })
    });

    const result = await response.json();
    console.log('‚úÖ Message sent to Staff Portal:', result);
    
  } catch (error) {
    console.error('‚ùå Error sending message:', error);
  }
}
```

### 3. Player Portal Backend API
```javascript
// /api/player-chat-integration/send
app.post('/api/player-chat-integration/send', async (req, res) => {
  try {
    const { sessionId, playerId, playerName, message, messageType } = req.body;

    // Send to Staff Portal via Pusher
    await pusher.trigger('staff-portal', 'new-player-message', {
      id: `msg-${Date.now()}`,
      message: message,
      sender: 'player',
      sender_name: playerName,
      player_id: parseInt(playerId),
      session_id: sessionId,
      timestamp: new Date().toISOString(),
      status: 'sent',
      type: 'player-to-staff'
    });

    console.log('üì° Player message sent to Staff Portal via Pusher');

    res.json({
      success: true,
      message: 'Message sent to staff portal'
    });

  } catch (error) {
    console.error('‚ùå Error in player chat integration:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
```

### 4. Display Staff Messages
```javascript
function displayStaffMessage(messageData) {
  const chatContainer = document.getElementById('chat-messages');
  
  const messageElement = document.createElement('div');
  messageElement.className = 'staff-message';
  messageElement.innerHTML = `
    <div class="message-bubble staff-bubble">
      <div class="message-text">${messageData.message}</div>
      <div class="message-meta">
        <span class="sender">${messageData.sender_name}</span>
        <span class="timestamp">${new Date(messageData.timestamp).toLocaleTimeString()}</span>
      </div>
    </div>
  `;

  chatContainer.appendChild(messageElement);
  chatContainer.scrollTop = chatContainer.scrollHeight;
}
```

---

## SESSION WORKFLOW

### Current Staff Portal Logic
1. **WAITING**: Player creates session, appears in Staff Portal waiting tab
2. **ACTIVE**: Staff clicks "Accept Chat" button, moves to active tab  
3. **RESOLVED**: Staff clicks "Resolve Chat" button, moves to resolved tab

### Database Tables (Optional - Pusher works without DB)
```sql
-- Simplified session tracking (if needed)
CREATE TABLE chat_sessions (
  id TEXT PRIMARY KEY,
  player_id INTEGER,
  player_name TEXT,
  status TEXT DEFAULT 'waiting', -- waiting, active, resolved
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

---

## TESTING THE INTEGRATION

### Test Player Portal to Staff Portal
```javascript
// Test sending from Player Portal
sendMessageToStaff('Hello from Player Portal! Testing bidirectional chat.');
```

### Test Staff Portal to Player Portal
1. Open Staff Portal
2. Click on any waiting chat
3. Type message and click send
4. Message should appear in Player Portal via Pusher

---

## WORKING EXAMPLE

### Complete Player Portal Chat Component
```javascript
class PlayerChatSystem {
  constructor(playerId, playerName) {
    this.playerId = playerId;
    this.playerName = playerName;
    this.pusher = null;
    this.channel = null;
  }

  async initialize() {
    // Initialize Pusher
    this.pusher = new Pusher(process.env.VITE_PUSHER_KEY, {
      cluster: process.env.VITE_PUSHER_CLUSTER,
      encrypted: true
    });

    // Subscribe to player channel
    this.channel = this.pusher.subscribe(`player-${this.playerId}`);
    
    // Listen for staff messages
    this.channel.bind('new-staff-message', (data) => {
      this.handleStaffMessage(data);
    });

    console.log(`üì° Player Chat initialized for player ${this.playerId}`);
  }

  handleStaffMessage(data) {
    console.log('üì® Received staff message:', data);
    
    // Add to chat UI
    this.addMessageToUI({
      text: data.message,
      sender: 'staff',
      senderName: data.sender_name,
      timestamp: data.timestamp
    });
  }

  async sendMessage(message) {
    try {
      // Send via backend API
      const response = await fetch('/api/player-chat-integration/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sessionId: `session-${this.playerId}`,
          playerId: this.playerId,
          playerName: this.playerName,
          message: message,
          messageType: 'text'
        })
      });

      if (response.ok) {
        // Add to local UI
        this.addMessageToUI({
          text: message,
          sender: 'player', 
          senderName: this.playerName,
          timestamp: new Date().toISOString()
        });
        
        console.log('‚úÖ Message sent to Staff Portal');
      }
    } catch (error) {
      console.error('‚ùå Error sending message:', error);
    }
  }

  addMessageToUI(message) {
    const chatContainer = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${message.sender}-message`;
    messageDiv.innerHTML = `
      <div class="message-bubble">
        <div class="message-text">${message.text}</div>
        <div class="message-time">${new Date(message.timestamp).toLocaleTimeString()}</div>
      </div>
    `;
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;